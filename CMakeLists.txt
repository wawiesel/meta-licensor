
cmake_minimum_required(VERSION 3.1.0 FATAL_ERROR)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/ ${CMAKE_SOURCE_DIR}/cmake/Modules/)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/libs)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/libs)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/apps)
include(FrameworkUtils)
include(GetGitRevisionDescription)
get_git_head_revision(GIT_REFSPEC GIT_SHA1)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if(WIN32)
    set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH "Install path prefix, prepended onto install directories (optional)")
    list(APPEND CMAKE_PREFIX_PATH $ENV{USER_DEVELOP}/boost/)
else(NOT WIN32)
    set(CMAKE_INSTALL_PREFIX "/usr/local/" CACHE PATH "Install path prefix, prepended onto install directories (optional)")
endif()

project(metalicensor CXX)
set(METALICENSOR_MAJOR_VERSION 1)
set(METALICENSOR_MINOR_VERSION 0)
set(METALICENSOR_PATCH_VERSION 0)
set(METALICENSOR_INT_VERSION "${METALICENSOR_MAJOR_VERSION}${METALICENSOR_MINOR_VERSION}${METALICENSOR_PATCH_VERSION}")
set(METALICENSOR_VERSION "${METALICENSOR_MAJOR_VERSION}.${METALICENSOR_MINOR_VERSION}.${METALICENSOR_PATCH_VERSION}")
set(METALICENSOR_SHORT_LICENSE "BSD 3-Clause Software License")
set(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL "Use verbose makefiles")
set(CMAKE_DISABLE_SOURCE_CHANGES ON)
set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "Configs" FORCE)
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:DEBUG>)
set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>:_DEBUG>)
if(DEFINED CMAKE_BUILD_TYPE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS ${CMAKE_CONFIGURATION_TYPES})
endif()
if(CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit toolchain/platform
    set(TARGET_PLATFORM_IS_x64 TRUE CACHE INTERNAL "" FORCE)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4) # 32-bit toolchain/platform
    set(TARGET_PLATFORM_IS_x64 FALSE CACHE INTERNAL "" FORCE)
else()
    message(FATAL_ERROR "Could not detect x64/x86 platform identity using void pointer size (s=${CMAKE_SIZEOF_VOID_P}).")
endif()

set(Boost_USE_STATIC_LIBS ON)
find_package(Boost REQUIRED COMPONENTS date_time unit_test_framework program_options system filesystem)
add_definitions(-DBOOST_ALL_NO_LIB) # use boost in header-only mode (no linking)
include_directories(${Boost_INCLUDE_DIRS})
link_directories(${Boost_LIBRARY_DIRS})

if(NOT WIN32)
    find_package(OpenSSL REQUIRED)
    include_directories(${OPENSSL_INCLUDE_DIR})
    list(APPEND EXTERNAL_LIBS ${OPENSSL_CRYPTO_LIBRARY})
    find_package(ZLIB REQUIRED) # Zlib required when openssl version < 1.0.1f
    list(APPEND EXTERNAL_LIBS ${ZLIB_LIBRARIES})
    list(APPEND EXTERNAL_LIBS dl)
endif(NOT WIN32)


if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang"))
    add_definitions(-Wall)
    add_definitions(-Wfatal-errors)
    add_definitions(-Wextra)
    add_definitions(-Wshadow)
    add_definitions(-Werror)
    add_definitions(-fPIC)
    add_definitions(-Wno-unused-value)
    add_definitions(-Wno-unused-parameter)
    add_definitions(-Wno-sign-compare)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    add_definitions(-DUNICODE -D_UNICODE)
    add_definitions(/fp:precise)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(/W4)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    message(FATAL_ERROR "Intel compiler still unsupported; please edit the main CMakeList.txt file to add proper configuration")
else()
    message(FATAL_ERROR "Unknown compiler; please edit the main CMakeList.txt file to add proper configuration")
endif()

include_directories("${CMAKE_BINARY_DIR}/keys/")

add_subdirectory(libs)
add_subdirectory(apps)
include(CTest)
add_subdirectory(tests)

